"""
TeleGPT - Telegram –±–æ—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ AI –º–æ–¥–µ–ª—è–º–∏
–° –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º polling –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
"""

import asyncio
import logging
import platform
import time
from typing import Dict, Set
from telegram.ext import Application

from bot.handlers import register_handlers
from config.settings import settings
from utils.logger import setup_logger
from database.db import init_database


class AdaptivePolling:
    """–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π polling –¥–ª—è TeleGPT"""
    
    def __init__(self, application: Application):
        self.application = application
        self.active_users: Set[int] = set()
        self.last_activity: Dict[int, float] = {}
        self.normal_interval = 10  # –û–±—ã—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (—Å–µ–∫—É–Ω–¥—ã)
        self.fast_interval = 2     # –ë—ã—Å—Ç—Ä—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (—Å–µ–∫—É–Ω–¥—ã)
        self.activity_timeout = 20  # –¢–∞–π–º–∞—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Å–µ–∫—É–Ω–¥—ã)
        self.running = False
    
    def add_active_user(self, user_id: int):
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ"""
        self.active_users.add(user_id)
        self.last_activity[user_id] = time.time()
        logging.info(f"‚ö° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∞–∫—Ç–∏–≤–µ–Ω - –±—ã—Å—Ç—Ä—ã–π polling ({self.fast_interval}—Å)")
    
    def remove_active_user(self, user_id: int):
        """–£–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö"""
        self.active_users.discard(user_id)
        if user_id in self.last_activity:
            del self.last_activity[user_id]
        if not self.active_users:
            logging.info(f"üêå –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –æ–±—ã—á–Ω—ã–π polling ({self.normal_interval}—Å)")
    
    def cleanup_inactive_users(self):
        """–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        current_time = time.time()
        inactive_users = [
            user_id for user_id, last_time in self.last_activity.items()
            if current_time - last_time > self.activity_timeout
        ]
        
        for user_id in inactive_users:
            self.remove_active_user(user_id)
    
    def get_current_interval(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª polling"""
        self.cleanup_inactive_users()
        return self.fast_interval if self.active_users else self.normal_interval
    
    async def start_adaptive_polling(self):
        """–ó–∞–ø—É—Å–∫ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ polling"""
        logging.info("üöÄ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π polling –∑–∞–ø—É—â–µ–Ω")
        logging.info(f"‚è±Ô∏è –û–±—ã—á–Ω—ã–π: {self.normal_interval}—Å, –±—ã—Å—Ç—Ä—ã–π: {self.fast_interval}—Å")
        
        self.running = True
        current_interval = self.normal_interval
        last_update_id = 0
        
        while self.running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                new_interval = self.get_current_interval()
                
                if new_interval != current_interval:
                    current_interval = new_interval
                    mode = "–±—ã—Å—Ç—Ä—ã–π ‚ö°" if current_interval == self.fast_interval else "–æ–±—ã—á–Ω—ã–π üêå"
                    logging.info(f"üîÑ –†–µ–∂–∏–º: {mode} ({current_interval}—Å)")
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                updates = await self.application.bot.get_updates(
                    offset=last_update_id,
                    limit=100,
                    timeout=5,
                    allowed_updates=["message", "callback_query"]
                )
                
                if updates:
                    for update in updates:
                        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –±—ã—Å—Ç—Ä—ã–π polling –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                        if (update.message and update.message.text and 
                            not update.message.text.startswith('/') and
                            update.effective_user):
                            
                            self.add_active_user(update.effective_user.id)
                        
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                        self.application.update_queue.put_nowait(update)
                        last_update_id = update.update_id + 1
                
                await asyncio.sleep(current_interval)
                
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–º polling: {e}")
                await asyncio.sleep(5)
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling"""
        self.running = False


class TeleGPTBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å TeleGPT –±–æ—Ç–∞"""
    
    def __init__(self):
        self.application = None
        self.adaptive_polling = None
        self.running = False
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        setup_logger()
        logging.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TeleGPT —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º polling...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await init_database()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
        self.application = Application.builder().token(settings.telegram_token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        register_handlers(self.application)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ polling
        self.adaptive_polling = AdaptivePolling(self.application)
        
        # –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.add_completion_middleware()
        
        logging.info("‚úÖ TeleGPT –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    def add_completion_middleware(self):
        """Middleware –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±—ã—Å—Ç—Ä–æ–≥–æ polling –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        
        # –ù–∞—Ö–æ–¥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        for group in self.application.handlers.values():
            for handler in group:
                if (hasattr(handler, 'filters') and 
                    str(handler.filters).find('TEXT') != -1 and
                    hasattr(handler, 'callback')):
                    
                    original_callback = handler.callback
                    
                    async def completion_wrapper(update, context, original_func=original_callback):
                        user_id = update.effective_user.id if update.effective_user else None
                        
                        try:
                            # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                            result = await original_func(update, context)
                            return result
                            
                        finally:
                            # –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                            if (user_id and self.adaptive_polling and 
                                user_id in self.adaptive_polling.active_users):
                                
                                await asyncio.sleep(3)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                                self.adaptive_polling.remove_active_user(user_id)
                    
                    handler.callback = completion_wrapper
                    break
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not self.application:
            await self.initialize()
        
        logging.info("üöÄ –ó–∞–ø—É—Å–∫ TeleGPT –±–æ—Ç–∞...")
        self.running = True
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            await self.application.initialize()
            await self.application.start()
            
            # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            processor_task = asyncio.create_task(self.process_updates())
            
            # –ó–∞–ø—É—Å–∫ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ polling
            await self.adaptive_polling.start_adaptive_polling()
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            raise
        finally:
            if 'processor_task' in locals():
                processor_task.cancel()
    
    async def process_updates(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        logging.info("üîÑ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
        
        while self.running:
            try:
                try:
                    update = await asyncio.wait_for(
                        asyncio.to_thread(self.application.update_queue.get),
                        timeout=1.0
                    )
                    await self.application.process_update(update)
                except asyncio.TimeoutError:
                    continue
                    
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
                await asyncio.sleep(1)
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logging.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ TeleGPT...")
        self.running = False
        
        if self.adaptive_polling:
            self.adaptive_polling.stop()
        
        if self.application:
            await self.application.stop()
            await self.application.shutdown()
        
        logging.info("‚úÖ TeleGPT –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è Windows
    if platform.system() == 'Windows':
        asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
    
    bot = TeleGPTBot()
    
    try:
        await bot.start()
    except KeyboardInterrupt:
        logging.info("‚å®Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logging.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await bot.stop()


if __name__ == "__main__":
    print("üöÄ TeleGPT - Telegram –±–æ—Ç —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º polling")
    print("‚ö° –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI –∑–∞–ø—Ä–æ—Å–æ–≤")
    print("üêå –≠–∫–æ–Ω–æ–º–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è")
    print("üìã –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("-" * 50)
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã TeleGPT –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"\nüí• –û—à–∏–±–∫–∞: {e}")