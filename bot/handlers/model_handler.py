"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ AI –º–æ–¥–µ–ª–∏
"""

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from database.db import AsyncSessionLocal
from services.user_service import UserService
import logging


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
AVAILABLE_MODELS = {
    "chatgpt": {
        "name": "ChatGPT",
        "emoji": "üß†",
        "description": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç OpenAI",
        "provider": "OpenAI"
    },
    "claude": {
        "name": "Claude",
        "emoji": "üé≠", 
        "description": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–æ–¥–µ–ª—å –æ—Ç Anthropic",
        "provider": "Anthropic"
    },
    "deepseek": {
        "name": "DeepSeek",
        "emoji": "üöÄ",
        "description": "–ë—ã—Å—Ç—Ä–∞—è –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å",
        "provider": "DeepSeek"
    }
}


async def model_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /model"""
    
    user = update.effective_user
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with AsyncSessionLocal() as db_session:
        user_service = UserService(db_session)
        current_model = await user_service.get_user_model(user.id)
        
        if not current_model:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            await user_service.get_or_create_user(
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            current_model = "chatgpt"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    text = f"""
ü§ñ <b>–í—ã–±–æ—Ä –Ω–µ–π—Ä–æ—Å–µ—Ç–∏</b>

–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {AVAILABLE_MODELS[current_model]['emoji']} <b>{AVAILABLE_MODELS[current_model]['name']}</b>

–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—â–µ–Ω–∏—è:
"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–æ–¥–µ–ª—è–º–∏
    keyboard = []
    for model_key, model_info in AVAILABLE_MODELS.items():
        # –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å
        prefix = "‚úÖ " if model_key == current_model else ""
        button_text = f"{prefix}{model_info['emoji']} {model_info['name']}"
        
        keyboard.append([
            InlineKeyboardButton(
                button_text, 
                callback_data=f"select_{model_key}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        text, 
        reply_markup=reply_markup,
        parse_mode='HTML'
    )


async def model_selection_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫–∏"""
    
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    callback_data = query.data
    
    if callback_data == "select_model":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
        await show_model_selection(query, user)
        
    elif callback_data.startswith("select_"):
        # –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
        model_key = callback_data.replace("select_", "")
        await handle_model_selection(query, user, model_key)
        
    elif callback_data == "back_to_main":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
        await show_main_menu(query, user)
        
    elif callback_data == "help":
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
        await show_help_inline(query)


async def show_model_selection(query, user):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with AsyncSessionLocal() as db_session:
        user_service = UserService(db_session)
        current_model = await user_service.get_user_model(user.id) or "chatgpt"
    
    text = f"""
ü§ñ <b>–í—ã–±–æ—Ä –Ω–µ–π—Ä–æ—Å–µ—Ç–∏</b>

–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {AVAILABLE_MODELS[current_model]['emoji']} <b>{AVAILABLE_MODELS[current_model]['name']}</b>

–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—â–µ–Ω–∏—è:
"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–æ–¥–µ–ª—è–º–∏
    keyboard = []
    for model_key, model_info in AVAILABLE_MODELS.items():
        prefix = "‚úÖ " if model_key == current_model else ""
        button_text = f"{prefix}{model_info['emoji']} {model_info['name']}"
        
        keyboard.append([
            InlineKeyboardButton(
                button_text, 
                callback_data=f"select_{model_key}"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text, 
        reply_markup=reply_markup,
        parse_mode='HTML'
    )


async def handle_model_selection(query, user, model_key):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    
    if model_key not in AVAILABLE_MODELS:
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å!")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async with AsyncSessionLocal() as db_session:
        user_service = UserService(db_session)
        success = await user_service.update_user_model(user.id, model_key)
        
        if not success:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            await user_service.get_or_create_user(
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            await user_service.update_user_model(user.id, model_key)
    
    model_info = AVAILABLE_MODELS[model_key]
    
    success_text = f"""
‚úÖ <b>–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!</b>

{model_info['emoji']} <b>{model_info['name']}</b>
üìù {model_info['description']}
üè¢ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {model_info['provider']}

–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏!
"""
    
    keyboard = [
        [
            InlineKeyboardButton("üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é", callback_data="select_model"),
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="back_to_main")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        success_text, 
        reply_markup=reply_markup,
        parse_mode='HTML'
    )
    
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤—ã–±—Ä–∞–ª –º–æ–¥–µ–ª—å {model_key}")


async def show_main_menu(query, user):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    
    welcome_text = f"""
ü§ñ <b>TeleGPT - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! 

–Ø –±–æ—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏:
‚Ä¢ üß† ChatGPT (OpenAI)
‚Ä¢ üé≠ Claude (Anthropic) 
‚Ä¢ üöÄ DeepSeek

üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏!
"""
    
    keyboard = [
        [
            InlineKeyboardButton("üîÑ –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å", callback_data="select_model"),
            InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        welcome_text, 
        reply_markup=reply_markup,
        parse_mode='HTML'
    )


async def show_help_inline(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ inline"""
    
    help_text = """
üìñ <b>–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞</b>

<b>üìã –ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/model - –í—ã–±–æ—Ä –Ω–µ–π—Ä–æ—Å–µ—Ç–∏  
/help - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç

<b>üí¨ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>
1. –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
3. –ü–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò

–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help
"""
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        help_text, 
        reply_markup=reply_markup,
        parse_mode='HTML'
    )


def register_model_handlers(application: Application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
    
    application.add_handler(CommandHandler("model", model_command))
    application.add_handler(CallbackQueryHandler(model_selection_callback))
    
    logging.info("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏")